import React, { useEffect, useState } from 'react'
import Button from 'react-bootstrap/Button'
import Row from 'react-bootstrap/Row'
import Col from 'react-bootstrap/Col'
import Form from 'react-bootstrap/Form'
import ListGroup from 'react-bootstrap/ListGroup'
import Image from 'react-bootstrap/Image'
import Card from 'react-bootstrap/Card'
import { useDispatch, useSelector } from 'react-redux'
import CheckoutSteps from '../components/CheckoutSteps.tsx/CheckoutSteps'
import Loader from '../components/Loader/Loader'
import { Link } from 'react-router-dom'
import createOrder from '../actions/order/createOrder'
import Message from '../components/Message/Message'
import resetCart from '../actions/cart/resetCart'
import { Helmet } from 'react-helmet'

const PlaceOrderScreen = ({ history }) => {
	const { cartItems, paymentMethod } = useSelector((state) => state.cart)
	const { userInfo } = useSelector((state) => state.user)
	const { order, loading, createError } = useSelector((state) => state.order)
	const [cashOnHand, setCashOnHand] = useState('')
	const dispatch = useDispatch()

	//USE EFFECT
	useEffect(() => {
		if (order) history.push(`/orders/${order._id}/pay`)
	}, [order, history])

	// CALCULATE PRICES
	const itemsPrice = cartItems.reduce(
		(acc, item) => acc + item.price * item.qty,
		0
	)
	const shippingPrice = 0
	/* const taxPrice = Number((0.12 * itemsPrice).toFixed(2)) */
	const taxPrice = 0
	const totalPrice = Math.floor(itemsPrice + shippingPrice + taxPrice)

	// FUNCTIONS AND HANDLERS
	function capitalize(s) {
		return s[0].toUpperCase() + s.slice(1)
	}
	const placeOrderHandler = async (e) => {
		e.preventDefault()
		await dispatch(
			createOrder({
				cashOnHand,
				paymentMethod,
				itemsPrice,
				shippingPrice,
				taxPrice,
				totalPrice,
				orderItems: cartItems,
				shippingAddress: userInfo.shippingAddress,
			})
		)
		await dispatch(resetCart())
	}

	if (!paymentMethod) history.push('/payment')
	if (!userInfo) return <Message children="Please log in to continue" />
	if (loading) return <Loader />
	return (
		<div className="py-3">
			<Helmet>
				<title>Pro Store | Order Summary</title>
				<meta name="description" content="We sell the best milk tea in town" />
			</Helmet>
			<CheckoutSteps step1 step2 step3 step4 />

			<Row>
				<Col md={8}>
					<ListGroup variant="flush">
						<ListGroup.Item>
							<h3>DELIVERY ADDRESS</h3>
							<p>
								<strong>Address: </strong>
								{capitalize(userInfo.shippingAddress.street)},{' '}
								{capitalize(userInfo.shippingAddress.sitio)},{' '}
								{capitalize(userInfo.shippingAddress.barangay)},{' '}
								{capitalize(userInfo.shippingAddress.city)},
							</p>
							<p>
								{' '}
								<strong>Mobile: </strong>
								{userInfo.shippingAddress.mobile}
							</p>{' '}
						</ListGroup.Item>
						<ListGroup.Item>
							<h3>PAYMENT METHOD</h3>
							<p>
								<strong>Pay through: </strong>
								{paymentMethod}
							</p>
						</ListGroup.Item>
						<ListGroup.Item>
							<h3>ORDER ITEMS</h3>
							<ListGroup variant="flush">
								{cartItems.map((item, i) => (
									<ListGroup.Item key={i}>
										<Row>
											<Col md={2}>
												<Image src={item.image} alt={item.name} fluid rounded />
											</Col>
											<Col>
												<Link to={`/products/${item.product}`}>
													{item.name}
												</Link>
											</Col>
											<Col md={4}>
												{item.qty} x â‚±{item.price} = â‚±{item.qty * item.price}
											</Col>
										</Row>
									</ListGroup.Item>
								))}
							</ListGroup>
						</ListGroup.Item>
					</ListGroup>
				</Col>
				<Col md={4}>
					<Card>
						<ListGroup variant="flush">
							<ListGroup.Item>
								<h4>ORDER SUMMARY</h4>
							</ListGroup.Item>
							<ListGroup.Item>
								<Row>
									<Col>Items</Col>
									<Col>â‚±{itemsPrice}</Col>
								</Row>
								<Row>
									<Col>Delivery Charge</Col>
									<Col>â‚±{shippingPrice}</Col>
								</Row>
								{/* <Row>
									<Col>Tax</Col>
									<Col>â‚±{taxPrice}</Col>
								</Row> */}
								<Row>
									<Col>Total</Col>
									<Col>â‚±{totalPrice}</Col>
								</Row>
							</ListGroup.Item>

							<ListGroup.Item>
								<Form onSubmit={placeOrderHandler}>
									<Form.Group>
										<Form.Control
											as="input"
											type="number"
											value={cashOnHand}
											required
											placeholder="Amount of cash on hand"
											onChange={(e) => setCashOnHand(e.target.value)}
										></Form.Control>
									</Form.Group>
									<Button type="submit" className="btn-block">
										Place Order
									</Button>
								</Form>
							</ListGroup.Item>
						</ListGroup>
					</Card>
					<Card className="mt-5">
						<ListGroup variant="flush">
							<ListGroup.Item variant="danger">
								<h5>NOTE FOR DELIVERY CHARGE</h5>
							</ListGroup.Item>

							<ListGroup.Item variant="danger">
								<p>
									<span>
										Orders outside Liloan, may have an additional delivery
										charge. We will call you to let you know about it and for
										you to confirm. Please keep your line open. Thanks! ðŸ˜ŠðŸ˜ŠðŸ˜Š
									</span>
								</p>
							</ListGroup.Item>
							{createError && (
								<ListGroup.Item>
									<Message children={createError} variant="danger" />
								</ListGroup.Item>
							)}

							{/* <ListGroup.Item variant="info">
								<strong>Status: Not yet verified</strong>
							</ListGroup.Item> */}
						</ListGroup>
					</Card>

					<Card className="mt-5">
						<ListGroup variant="flush">
							<ListGroup.Item variant="danger">
								<h5>NOTE FOR CASH ON DELIVERY</h5>
							</ListGroup.Item>

							<ListGroup.Item variant="danger">
								<p>
									<span>
										{`Once order is placed, Please keep your line open
								(MOBILE NO. ${userInfo.shippingAddress.mobile}) for the verification of your delivery 
								address and order. Thank you ðŸ˜ŠðŸ˜ŠðŸ˜Š
								`}
									</span>
								</p>
							</ListGroup.Item>
							{createError && (
								<ListGroup.Item>
									<Message children={createError} variant="danger" />
								</ListGroup.Item>
							)}

							{/* <ListGroup.Item variant="info">
								<strong>Status: Not yet verified</strong>
							</ListGroup.Item> */}
						</ListGroup>
					</Card>
				</Col>
			</Row>
		</div>
	)
}

export default PlaceOrderScreen
